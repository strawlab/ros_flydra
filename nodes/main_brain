#!/usr/bin/env python

import traceback
import optparse
import math

import flydra.MainBrain

import numpy as np

import roslib;
roslib.load_manifest('ros_flydra')

from ros_flydra import cv2_bridge

import rospy
import sensor_msgs.msg
import ros_flydra.msg

def add_crosshairs_to_nparr(arr, row, col, sz=-1, fill=255, chan=None):
    ri = arr.shape[0]
    ci = arr.shape[1]
    
    row = np.clip(math.floor(row),0,ri-1)
    col = np.clip(math.floor(col),0,ci-1)
    
    if sz < 0:
        if chan == None:
            arr[row,0:ci] = fill
            arr[0:ri,col] = fill
        else:
            arr[row,0:ci,chan] = fill
            arr[0:ri,col,chan] = fill
    elif sz == 0:
        if chan == None:
            arr[row,col] = fill
        else:
            arr[row,col,chan] = fill
    else:
        if chan == None:
            arr[max(0,row-sz):min(row+sz,ri),max(0,col-sz):min(col+sz,ci)] = fill
        else:
            arr[max(0,row-sz):min(row+sz,ri),max(0,col-sz):min(col+sz,ci),chan] = fill

class _Camera(rospy.SubscribeListener):
    def __init__(self, cam_id, scalar_control_info, reqimagedt):
        self.cam_id = cam_id
        self.sci = scalar_control_info
        self.n_subscribed = 0
        self.reqimagedt = reqimagedt
        self.img = self.img = np.zeros((self.sci['height'],self.sci['width'],3),dtype=np.uint8)
        self.got_an_image = False
        self.lastreqimgt = rospy.get_time()
        self.pub = rospy.Publisher("%s/tracking" % cam_id, sensor_msgs.msg.Image, subscriber_listener=self)

        rospy.loginfo("Camera %s: if subscribed, images will be updated every %.2fs" % (self.cam_id, self.reqimagedt))

    def peer_subscribe(self, topic_name, topic_publish, peer_publish):
        self.n_subscribed += 1

    def peer_unsubscribe(self, topic_name, num_peers):
        self.n_subscribed = max(0, self.n_subscribed-1)

    def someone_subscribed(self):
        return self.n_subscribed > 0

    def should_request_new_image(self):
        now = rospy.get_time()
        pub_update = False
        first_update = not self.got_an_image

        if self.someone_subscribed():
            if (now - self.lastreqimgt) > self.reqimagedt:
                self.lastreqimgt = now
                pub_update = True

        return pub_update or first_update

    def publish_image(self, image, pts2d, reproj2d):
        if image is not None:
            self.img[:,:,:] = image.reshape((image.shape[0],image.shape[1],1))
            self.got_an_image = True

        if not self.someone_subscribed():
            return

        for pt in pts2d:
            if np.isnan(pt[0]):
                continue
            add_crosshairs_to_nparr(self.img,int(pt[1]),int(pt[0]),sz=2,chan=1)

        for pt in reproj2d:
            if np.isnan(pt[0]):
                continue
            add_crosshairs_to_nparr(self.img,int(pt[1]),int(pt[0]),sz=2,chan=2)

        msg = cv2_bridge.numpy_to_imgmsg(self.img)
        self.pub.publish(msg)

class MainBrainApp(object):
    def __init__(self, pub_img_interval, req_img_interval):
        self._currently_recording_cams = []
        self.cameras = {}
        self.pub_best_pose = rospy.Publisher("~best_pose", ros_flydra.msg.BestPose, queue_size=1)
        self.req_img_interval = req_img_interval
        self.pub_img_interval = pub_img_interval
        self.pub_last_t = rospy.get_time()

        rospy.loginfo("Will publish images at %.1fHz if any subscribers" % (1.0/pub_img_interval))

    def _on_new_camera(self, cam_id, scalar_control_info, fqdnport):
        rospy.loginfo("new camera: %s" % cam_id)
        self.cameras[cam_id] = _Camera(cam_id, scalar_control_info, self.req_img_interval)

    def _on_old_camera(self, cam_id):
        rospy.loginfo("lost camera: %s" % cam_id)
        del self.cameras[cam_id]

    def _on_config_change(self):
        rospy.logdebug("config change")
        if not hasattr(self,"main_brain"):
            #race when closing
            return

    def attach_and_start_main_brain(self,main_brain):
        self.main_brain = main_brain
        self.main_brain.set_config_change_callback(self._on_config_change)
        self.main_brain.set_new_camera_callback(self._on_new_camera)
        self.main_brain.set_old_camera_callback(self._on_old_camera)
        self.main_brain.start_listening()

    def service_mainbrain(self):
        if not hasattr(self,'main_brain'):
            return
        self.main_brain.service_pending() # may call OnNewCamera, OnOldCamera, etc

    def get_latest_pose(self):
        if not hasattr(self,'main_brain'):
            return

        if not self.main_brain.coord_processor.is_alive():
            rospy.signal_shutdown("coordinate processor thread died")
            return

        now = rospy.get_time()
        if (now - self.pub_last_t) > self.pub_img_interval:
            self.pub_last_t = now
            pub = True
        else:
            pub = False

        reproj_points = {}

        realtime_data = self.main_brain.best_realtime_data
        if realtime_data is not None:
            Xs, min_mean_dist = realtime_data
            best = ros_flydra.msg.BestPose()
            best.pose.position.x = Xs[0][0]
            best.pose.position.y = Xs[0][1]
            best.pose.position.z = Xs[0][2]
            best.error = min_mean_dist
            self.pub_best_pose.publish(best)
            if min_mean_dist <= 10.0:
                r = self.main_brain.reconstructor
                if pub and (r is not None):
                    recon_cam_ids = r.get_cam_ids()
                    for cam_id in self.cameras:
                        if cam_id in recon_cam_ids:
                            #there is a reconstructor data for this cam_id. Some cam's might
                            #not have reconstructors, like uncalibrated cams
                            pts = [r.find2d(cam_id,X,distorted=True) for X in Xs]
                            reproj_points[cam_id] = pts

        if pub:
            for cam_id in self.cameras:
                try:
                    # returns None if no new image
                    image, show_fps, points, image_coords = self.main_brain.get_last_image_fps(cam_id)
                    self.cameras[cam_id].publish_image(image, points, reproj_points.get(cam_id, []))
                except KeyError:
                    # may have lost camera since call to service_pending
                    pass
                
    def get_latest_images(self):
        if not hasattr(self,'main_brain'):
            return

        for cam_id in self.cameras:
            if self.cameras[cam_id].should_request_new_image():
                try:
                    self.main_brain.request_image_async(cam_id)
                except KeyError:
                    #camera probably just disconnected
                    pass

def main():
    usage = '%prog [options]'
    parser = optparse.OptionParser(usage)
    parser.add_option("--server", dest="server", type='string',
                      help="A parameter only present for backwards compability",
                      default='',
                      metavar="SERVER")
    parser.add_option("--save-profiling-data",
                      default=False, action="store_true",
                      help="save data to profile/debug the Kalman-filter based tracker (WARNING: SLOW)",
                      )
    parser.add_option("--disable-sync-errors", dest='show_sync_errors',
                      default=True, action="store_false",
                      )
    (options, args) = parser.parse_args()
    if options.server != '':
        rospy.logwarn("Deprecated '--server' CLI argument given.")

    rospy.init_node('flydra_mainbrain')

    #there are 3 rates/freqs here and it is a bit confusing
    #
    #pub freq is the rate at which images are published (with tracking information
    #overlayed) ONLY IF THERE IS A SUBSCRIBER
    #
    #req_image_interval is the rate at which the mainbrain requests new images
    #from the camnodes.
    pub_freq = rospy.get_param('image_freq', 1.0)
    req_img_interval  = rospy.get_param('req_image_interval', 5.0)

    app = MainBrainApp(1.0/pub_freq, req_img_interval)

    main_brain = flydra.MainBrain.MainBrain(server=options.server,
                                     save_profiling_data=options.save_profiling_data,
                                     show_sync_errors=options.show_sync_errors)

    try:
        # connect server to GUI
        app.attach_and_start_main_brain(main_brain)

        #service the mainbrain (handle new cameras, get latest pose, etc)
        #at 2Hz (old mainbrain used to do it every 900ms
        r = rospy.Rate(2)
        while not rospy.is_shutdown():
            app.service_mainbrain()
            app.get_latest_pose()
            #the actual rate of requesting the latest images from the camera nodes
            #is controled by req_img_interval
            app.get_latest_images()
            try:
                r.sleep()
            except rospy.ROSInterruptException:
                #shutting down
                pass

        rospy.loginfo("mainbrain finished")
        del app
        
    finally:
        main_brain.quit()
    
if __name__ == '__main__':
    main()
